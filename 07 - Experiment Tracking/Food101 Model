import torch
import torchvision

device = "cuda" if torch.cuda.is_available() else "cpu"
device

# Regular imports
import matplotlib.pyplot as plt

from torch import nn
from torchvision import transforms

try:
  from torchinfo import summary
except:
  print("[INFO] Couldn't find torchinfo... installing it")
  # !pip install -q torchinfo
  from torchinfo import summary

# Import going_modular directory
try:
  from going_modular import data_setup, engine
except:
  # Get the going_modular scripts
  print("[INFO] Couldn't find going_modular scripts... downloading them from github")
  # !git clone https://github.com/Jiwei-Cao/PyTorch
  # !mv "PyTorch/05 - Going Modular/going_modular" .
  # !rm -rf PyTorch
  from going_modular import data_setup, engine

# Set seeds
def set_seeds(seed: int=42):
  """Sets random sets for torch operations.

  Args:
      seed (int, optional): Random seed to set. Defaults to 42.
  """
  torch.manual_seed(seed)
  torch.cuda.manual_seed(seed)

import os
import zipfile

from pathlib import Path

import requests

def download_data(source: str,
                  destination: str,
                  remove_source: bool = True) -> Path:
  """Downloads a zipped dataset from source and unzips to destination.

    Args:
        source (str): A link to a zipped file containing data.
        destination (str): A target directory to unzip data to.
        remove_source (bool): Whether to remove the source after downloading and extracting.
    
    Returns:
        pathlib.Path to downloaded data.
  """
  # Setup path to data folder
  data_path = Path("data/")
  image_path = data_path / destination

  # If the image folder doesn't exist, download and prepare it...
  if image_path.is_dir():
    print(f"[INFO] {image_path} directory exists, skipping download")
  else:
    print(f"[INFO] Did not find {image_path} directory, creating one...")
    image_path.mkdir(parents=True, exist_ok=True)

    # Download pizza, steak, sushi data
    target_file = Path(source).name
    with open(data_path / target_file, "wb") as f:
      request = requests.get(source)
      print(f"[INFO] Downloading {target_file} from {source}...")
      f.write(request.content)

    # Unzip pizza, steak, sushi data
    with zipfile.ZipFile(data_path / target_file, "r") as zip_ref:
      print(f"[INFO] Unzipping {target_file} data...")
      zip_ref.extractall(image_path)
    
    # Remove .zipfile
    if remove_source:
      os.remove(data_path / target_file)

  return image_path

image_path = download_data(source="https://github.com/Jiwei-Cao/PyTorch/raw/refs/heads/main/data/pizza_steak_sushi.zip",
                        destination="pizza_steak_sushi")
image_path